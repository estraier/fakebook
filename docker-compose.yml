services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${FAKEBOOK_DATABASE_USER}
      POSTGRES_PASSWORD: ${FAKEBOOK_DATABASE_PASSWORD}
      POSTGRES_DB: ${FAKEBOOK_DATABASE_NAME}
    ports:
      - "${FAKEBOOK_DATABASE_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FAKEBOOK_DATABASE_USER} -d ${FAKEBOOK_DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  redis:
    image: redis:7
    restart: always
    ports:
      - "${FAKEBOOK_REDIS_PORT}:6379"
    command: ["redis-server", "--requirepass", "${FAKEBOOK_REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${FAKEBOOK_REDIS_PASSWORD} PING || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  smtp:
    image: boky/postfix
    restart: always
    environment:
      RELAYHOST: ${FAKEBOOK_SMTP_RELAYHOST}
      RELAYHOST_USERNAME: ${FAKEBOOK_SMTP_RELAYHOST_USERNAME}
      RELAYHOST_PASSWORD: ${FAKEBOOK_SMTP_RELAYHOST_PASSWORD}
      ALLOWED_SENDER_DOMAINS: ${FAKEBOOK_SMTP_SENDER_DOMAINS}
    ports:
      - "${FAKEBOOK_SMTP_PORT}:587"

  mailworker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      smtp:
        condition: service_started
    environment:
      FAKEBOOK_REDIS_HOST: ${FAKEBOOK_REDIS_HOST}
      FAKEBOOK_REDIS_PORT: ${FAKEBOOK_REDIS_PORT}
      FAKEBOOK_REDIS_PASSWORD: ${FAKEBOOK_REDIS_PASSWORD}
      FAKEBOOK_SMTP_HOST: ${FAKEBOOK_SMTP_HOST}
      FAKEBOOK_SMTP_PORT: ${FAKEBOOK_SMTP_PORT}
      FAKEBOOK_MAIL_SENDER_ADDRESS: ${FAKEBOOK_MAIL_SENDER_ADDRESS}
    command: ["node", "dist/mailWorker.js"]
    restart: unless-stopped

  backend:
    build:
      dockerfile: backend/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${FAKEBOOK_BACKEND_PORT}:${FAKEBOOK_BACKEND_PORT}"
    environment:
      FAKEBOOK_FRONTEND_ORIGIN: ${FAKEBOOK_FRONTEND_ORIGIN}
      FAKEBOOK_BACKEND_HOST: ${FAKEBOOK_BACKEND_HOST}
      FAKEBOOK_BACKEND_PORT: ${FAKEBOOK_BACKEND_PORT}
      FAKEBOOK_DATABASE_HOST: ${FAKEBOOK_DATABASE_HOST}
      FAKEBOOK_DATABASE_USER: ${FAKEBOOK_DATABASE_USER}
      FAKEBOOK_DATABASE_PASSWORD: ${FAKEBOOK_DATABASE_PASSWORD}
      FAKEBOOK_DATABASE_NAME: ${FAKEBOOK_DATABASE_NAME}
      FAKEBOOK_DATABASE_PORT: ${FAKEBOOK_DATABASE_PORT}
      FAKEBOOK_REDIS_HOST: ${FAKEBOOK_REDIS_HOST}
      FAKEBOOK_REDIS_PORT: ${FAKEBOOK_REDIS_PORT}
      FAKEBOOK_REDIS_PASSWORD: ${FAKEBOOK_REDIS_PASSWORD}
      FAKEBOOK_MAIL_SENDER_ADDRESS: ${FAKEBOOK_MAIL_SENDER_ADDRESS}
      FAKEBOOK_TEST_SIGNUP_CODE: ${FAKEBOOK_TEST_SIGNUP_CODE}
    command: ["node", "dist/index.js"]
    restart: unless-stopped

  frontend:
    build:
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_BASE: "http://${FAKEBOOK_BACKEND_HOST}:${FAKEBOOK_BACKEND_PORT}"
    depends_on:
      backend:
        condition: service_started
    environment:
      PORT: ${FAKEBOOK_FRONTEND_PORT}
      NEXT_PUBLIC_API_BASE: "http://${FAKEBOOK_BACKEND_HOST}:${FAKEBOOK_BACKEND_PORT}"
    ports:
      - "${FAKEBOOK_FRONTEND_PORT}:${FAKEBOOK_FRONTEND_PORT}"
    command: ["node", "frontend/server.js"]
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
