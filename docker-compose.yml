services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${STGY_DATABASE_USER}
      POSTGRES_PASSWORD: ${STGY_DATABASE_PASSWORD}
      POSTGRES_DB: ${STGY_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --lc-collate=C --lc-ctype=C"
    ports:
      - "${STGY_DATABASE_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STGY_DATABASE_USER} -d ${STGY_DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    environment:
      MINIO_ROOT_USER: ${STGY_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${STGY_MINIO_ROOT_PASSWORD}
      MINIO_API_CORS_ALLOW_ORIGIN: ${STGY_MINIO_ALLOW_ORIGIN}
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    command: ["minio", "server", "/data", "--console-address", ":9001"]
    ports:
      - "${STGY_MINIO_PORT}:9000"
      - "${STGY_MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
      - ./minio/entrypoint.sh:/entrypoint.sh:ro
      - ./minio/init.sh:/init.sh:ro
    restart: unless-stopped

  redis:
    image: redis:7
    restart: always
    ports:
      - "${STGY_REDIS_PORT}:6379"
    command: ["redis-server", "--requirepass", "${STGY_REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${STGY_REDIS_PASSWORD} PING || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  smtp:
    image: axllent/mailpit:v1.27
    restart: always
    environment:
      MP_SMTP_BIND_ADDR: 0.0.0.0:587
      MP_UI_BIND_ADDR: 0.0.0.0:8025
      # MP_SMTP_RELAY_HOST: dbmx.net
      # MP_SMTP_RELAY_PORT: 587
      # MP_SMTP_RELAY_STARTTLS: true
      # MP_SMTP_RELAY_AUTH: plain
      # MP_SMTP_RELAY_USERNAME: postfix@dbmx.net
      # MP_SMTP_RELAY_PASSWORD: ********
      # MP_SMTP_RELAY_OVERRIDE_FROM: noreply@dbmx.net
      # MP_SMTP_RELAY_ALL: true
    ports:
      - "${STGY_SMTP_PORT}:587"
      - "8025:8025"
    volumes:
      - mailpit_data:/data

  caddy:
    image: caddy:2
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    ports:
      - "${STGY_CADDY_PORT}:8080"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

  mailworker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      smtp:
        condition: service_started
    environment:
      STGY_REDIS_HOST: ${STGY_REDIS_HOST}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD}
      STGY_SMTP_HOST: ${STGY_SMTP_HOST}
      STGY_SMTP_PORT: ${STGY_SMTP_PORT}
      STGY_MAIL_SENDER_ADDRESS: ${STGY_MAIL_SENDER_ADDRESS}
    command: ["node", "dist/mailWorker.js"]
    restart: unless-stopped

  mediaworker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      STGY_REDIS_HOST: ${STGY_REDIS_HOST}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD}
      STGY_STORAGE_DRIVER: ${STGY_STORAGE_DRIVER}
      STGY_STORAGE_S3_ENDPOINT: ${STGY_STORAGE_S3_ENDPOINT}
      STGY_STORAGE_S3_REGION: ${STGY_STORAGE_S3_REGION}
      STGY_STORAGE_S3_ACCESS_KEY_ID: ${STGY_STORAGE_S3_ACCESS_KEY_ID}
      STGY_STORAGE_S3_SECRET_ACCESS_KEY: ${STGY_STORAGE_S3_SECRET_ACCESS_KEY}
      STGY_STORAGE_S3_FORCE_PATH_STYLE: ${STGY_STORAGE_S3_FORCE_PATH_STYLE}
      STGY_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX}
      STGY_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX}
    command: ["node", "dist/mediaWorker.js"]
    restart: unless-stopped

  notificationworker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      STGY_DATABASE_HOST: ${STGY_DATABASE_HOST}
      STGY_DATABASE_USER: ${STGY_DATABASE_USER}
      STGY_DATABASE_PASSWORD: ${STGY_DATABASE_PASSWORD}
      STGY_DATABASE_NAME: ${STGY_DATABASE_NAME}
      STGY_DATABASE_PORT: ${STGY_DATABASE_PORT}
    command: ["node", "dist/notificationWorker.js"]
    restart: unless-stopped

  backend:
    build:
      dockerfile: backend/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "${STGY_BACKEND_PORT}:${STGY_BACKEND_PORT}"
    environment:
      STGY_FRONTEND_ORIGIN: ${STGY_FRONTEND_ORIGIN}
      STGY_BACKEND_HOST: ${STGY_BACKEND_HOST}
      STGY_BACKEND_PORT: ${STGY_BACKEND_PORT}
      STGY_DATABASE_HOST: ${STGY_DATABASE_HOST}
      STGY_DATABASE_USER: ${STGY_DATABASE_USER}
      STGY_DATABASE_PASSWORD: ${STGY_DATABASE_PASSWORD}
      STGY_DATABASE_NAME: ${STGY_DATABASE_NAME}
      STGY_DATABASE_PORT: ${STGY_DATABASE_PORT}
      STGY_STORAGE_DRIVER: ${STGY_STORAGE_DRIVER}
      STGY_STORAGE_S3_ENDPOINT: ${STGY_STORAGE_S3_ENDPOINT}
      STGY_STORAGE_S3_REGION: ${STGY_STORAGE_S3_REGION}
      STGY_STORAGE_S3_ACCESS_KEY_ID: ${STGY_STORAGE_S3_ACCESS_KEY_ID}
      STGY_STORAGE_S3_SECRET_ACCESS_KEY: ${STGY_STORAGE_S3_SECRET_ACCESS_KEY}
      STGY_STORAGE_S3_FORCE_PATH_STYLE: ${STGY_STORAGE_S3_FORCE_PATH_STYLE}
      STGY_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX}
      STGY_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX}
      STGY_REDIS_HOST: ${STGY_REDIS_HOST}
      STGY_REDIS_PORT: ${STGY_REDIS_PORT}
      STGY_REDIS_PASSWORD: ${STGY_REDIS_PASSWORD}
      STGY_MAIL_SENDER_ADDRESS: ${STGY_MAIL_SENDER_ADDRESS}
      STGY_TEST_SIGNUP_CODE: ${STGY_TEST_SIGNUP_CODE}
      STGY_ID_ISSUE_WORKER_ID: ${STGY_ID_ISSUE_WORKER_ID}
    command: ["node", "dist/index.js"]
    restart: unless-stopped

  frontend:
    build:
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_API_BASE_URL: ${STGY_BACKEND_API_BASE_URL}
        NEXT_PUBLIC_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX}
        NEXT_PUBLIC_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX}
    depends_on:
      backend:
        condition: service_started
    environment:
      PORT: ${STGY_FRONTEND_PORT}
      NEXT_PUBLIC_BACKEND_API_BASE_URL: ${STGY_BACKEND_API_BASE_URL}
      NEXT_PUBLIC_STORAGE_S3_BUCKET_PREFIX: ${STGY_STORAGE_S3_BUCKET_PREFIX}
      NEXT_PUBLIC_STORAGE_S3_PUBLIC_URL_PREFIX: ${STGY_STORAGE_S3_PUBLIC_URL_PREFIX}
    ports:
      - "${STGY_FRONTEND_PORT}:${STGY_FRONTEND_PORT}"
    command: ["node", "frontend/server.js"]
    restart: unless-stopped

volumes:
  db_data:
  minio_data:
  redis_data:
  mailpit_data:
  caddy_data:
  caddy_config:
