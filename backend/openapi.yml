openapi: 3.1.0
info:
  title: Fakebook API
  version: 1.0.0
  description: API specification for the Fakebook backend.

servers:
  - url: http://localhost:3001

paths:
  /auth:
    post:
      summary: Log in and start a session
      description: Logs in the user and sets the session_id cookie if credentials are correct.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
        400:
          description: Missing email or password
        401:
          description: Invalid credentials

    get:
      summary: Get session info
      description: Returns the current session info for the user.
      responses:
        200:
          description: Session info returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  email:
                    type: string
                  loggedInAt:
                    type: string
                    format: date-time
        401:
          description: No valid session

    delete:
      summary: Logout and clear session
      description: Logs out and clears the session_id cookie.
      responses:
        200:
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string

  /users:
    get:
      summary: List users
      description: Returns a list of users. Login required.
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: q
          in: query
          schema: { type: string }
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Login required

    post:
      summary: Create user (admin only)
      description: Create a new user. Only admin users can access this endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: Admin only
        400:
          description: Invalid input

  /users/count:
    get:
      summary: Get user count
      description: Returns the number of users.
      responses:
        200:
          description: Count returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        401:
          description: Login required

  /users/{id}:
    get:
      summary: Get user by ID
      description: Returns a user by ID. Login required.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Login required
        404:
          description: Not found

    put:
      summary: Update user
      description: Update user information. Only admin or the user themselves.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Login required
        403:
          description: Forbidden
        404:
          description: Not found

    delete:
      summary: Delete user
      description: Delete a user. Only admin or the user themselves.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        403:
          description: Forbidden
        404:
          description: Not found

  /users/{id}/follow:
    post:
      summary: Follow a user
      description: The logged-in user follows another user.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Followed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        400:
          description: Cannot follow yourself or already followed

    delete:
      summary: Unfollow a user
      description: The logged-in user unfollows another user.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Unfollowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        404:
          description: Not followed

  /users/{id}/followees:
    get:
      summary: List followees
      description: Returns users followed by the given user.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        200:
          description: List of followees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Login required

  /users/{id}/followers:
    get:
      summary: List followers
      description: Returns users who follow the given user.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        200:
          description: List of followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Login required

  /users/{id}/password:
    put:
      summary: Update password
      description: Update the password for the user.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required: [password]
      responses:
        200:
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        403:
          description: Forbidden
        404:
          description: Not found

  /posts:
    get:
      summary: List posts
      description: Returns a list of posts. Login required.
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: query
          in: query
          schema: { type: string }
        - name: user
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
      responses:
        200:
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          description: Login required

    post:
      summary: Create post
      description: Create a new post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostInput"
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        401:
          description: Login required
        400:
          description: Invalid input

  /posts/count:
    get:
      summary: Get post count
      description: Returns the total number of posts.
      responses:
        200:
          description: Count returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        401:
          description: Login required

  /posts/liked/detail:
    get:
      summary: List liked posts in detail
      description: Returns a detailed list of posts liked by the current user.
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
      responses:
        200:
          description: Liked posts detail
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDetail"
        401:
          description: Login required

  /posts/by-followees/detail:
    get:
      summary: List posts by followees in detail
      description: Returns posts by users you follow, with details.
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc], default: desc }
        - name: include_self
          in: query
          schema: { type: boolean }
      responses:
        200:
          description: Posts by followees detail
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDetail"
        401:
          description: Login required

  /posts/{id}:
    get:
      summary: Get post by ID
      description: Returns a post by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        401:
          description: Login required
        404:
          description: Not found

    put:
      summary: Update post
      description: Update a post. Only owner or admin.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostInput"
      responses:
        200:
          description: Post updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        401:
          description: Login required
        403:
          description: Forbidden
        404:
          description: Not found

    delete:
      summary: Delete post
      description: Delete a post. Only owner or admin.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        403:
          description: Forbidden
        404:
          description: Not found

  /posts/{id}/detail:
    get:
      summary: Get post detail by ID
      description: Returns detailed info for a post by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Post detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetail"
        401:
          description: Login required
        404:
          description: Not found

  /posts/{id}/like:
    post:
      summary: Like a post
      description: Like a post by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        400:
          description: Could not like

    delete:
      summary: Unlike a post
      description: Remove like from a post.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        200:
          description: Unliked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        401:
          description: Login required
        404:
          description: Like not found

  /signup/start:
    post:
      summary: Start signup process
      description: Starts signup by generating a verification code, returning signup_id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        201:
          description: Signup started
          content:
            application/json:
              schema:
                type: object
                properties:
                  signup_id:
                    type: string
        400:
          description: Invalid input

  /signup/verify:
    post:
      summary: Verify signup code and create user
      description: Verifies the code and creates a user if correct.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signup_id:
                  type: string
                verification_code:
                  type: string
              required: [signup_id, verification_code]
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
        400:
          description: Verification failed

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        nickname: { type: string }
        is_admin: { type: boolean }
        introduction: { type: string }
        personality: { type: string }
        model: { type: string }
        created_at: { type: string, format: date-time }

    CreateUserInput:
      type: object
      properties:
        email: { type: string }
        nickname: { type: string }
        password: { type: string }
        is_admin: { type: boolean }
        introduction: { type: string }
        personality: { type: string }
        model: { type: string }
      required: [email, nickname, password, introduction, personality, model]

    UpdateUserInput:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        nickname: { type: string }
        is_admin: { type: boolean }
        introduction: { type: string }
        personality: { type: string }
        model: { type: string }
      required: [id]

    Post:
      type: object
      properties:
        id: { type: string }
        content: { type: string }
        owned_by: { type: string }
        reply_to:
          type: string
          nullable: true
        created_at: { type: string, format: date-time }

    CreatePostInput:
      type: object
      properties:
        content: { type: string }
        owned_by: { type: string }
        reply_to:
          type: string
          nullable: true
      required: [content]

    UpdatePostInput:
      type: object
      properties:
        id: { type: string }
        content: { type: string }
        reply_to:
          type: string
          nullable: true
      required: [id]

    PostDetail:
      allOf:
        - $ref: "#/components/schemas/Post"
        - type: object
          properties:
            owner_nickname: { type: string }
            reply_count: { type: string }
            like_count: { type: string }
            tags:
              type: array
              items: { type: string }
