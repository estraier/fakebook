openapi: 3.1.0
info:
  title: Fakebook API
  version: 1.0.0
  description: |
    Fakebook SNS backend API (Express/TypeScript)
    - Cookie authentication: session_id

servers:
  - url: http://localhost:3001

components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: session_id

  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
      required: [error]

    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        nickname: { type: string }
        is_admin: { type: boolean }
        introduction: { type: string }
        personality: { type: string }
        model: { type: string }
        created_at: { type: string, format: date-time }
      required: [id, email, nickname, is_admin, introduction, personality, model, created_at]

    Post:
      type: object
      properties:
        id: { type: string }
        content: { type: string }
        owned_by: { type: string }
        reply_to:
          type: string
          nullable: true
        created_at: { type: string, format: date-time }
      required: [id, content, owned_by, reply_to, created_at]

    PostDetail:
      allOf:
        - $ref: "#/components/schemas/Post"
        - type: object
          properties:
            owner_nickname: { type: string }
            reply_count: { type: integer }
            like_count: { type: integer }
            tags:
              type: array
              items: { type: string }
            is_liked_by_focus_user:
              type: boolean
              nullable: true
            is_replied_by_focus_user:
              type: boolean
              nullable: true
          required: [owner_nickname, reply_count, like_count, tags]

  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

paths:
  /auth:
    post:
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        "200":
          description: Login OK, sets session_id cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string }
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

    get:
      summary: Get session info
      security:
        - sessionCookie: []
      responses:
        "200":
          description: Session valid, returns session info
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: { type: string }
                  email: { type: string }
                  loggedInAt: { type: string }
                required: [userId, email, loggedInAt]
        "401":
          $ref: "#/components/responses/Error401"

    delete:
      summary: Log out
      security:
        - sessionCookie: []
      responses:
        "200":
          description: Logout OK (clears cookie)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }

  /signup/start:
    post:
      summary: Start signup (send verification code)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        "201":
          description: Signup started
          content:
            application/json:
              schema:
                type: object
                properties:
                  signup_id: { type: string }
        "400":
          $ref: "#/components/responses/Error400"

  /signup/verify:
    post:
      summary: Complete signup (verify code)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signup_id: { type: string }
                verification_code: { type: string }
              required: [signup_id, verification_code]
      responses:
        "201":
          description: Signup success
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string }
        "400":
          $ref: "#/components/responses/Error400"

  /users/count:
    get:
      summary: Get total user count (with optional filters)
      security:
        - sessionCookie: []
      parameters:
        - name: nickname
          in: query
          schema: { type: string }
        - name: query
          in: query
          schema: { type: string }
      responses:
        "200":
          description: User count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
        "401":
          $ref: "#/components/responses/Error401"

  /users:
    get:
      summary: List users
      security:
        - sessionCookie: []
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: query
          in: query
          schema: { type: string }
        - name: nickname
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

    post:
      summary: (Admin only) Create user
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                nickname: { type: string }
                password: { type: string }
                is_admin: { type: boolean }
                introduction: { type: string }
                personality: { type: string }
                model: { type: string }
              required: [email, nickname, password, is_admin, introduction, personality, model]
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/Error403"
        "400":
          $ref: "#/components/responses/Error400"

  /users/{id}:
    get:
      summary: Get user details
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

    put:
      summary: Update user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                nickname: { type: string }
                is_admin: { type: boolean }
                introduction: { type: string }
                personality: { type: string }
                model: { type: string }
              required: [email, nickname, introduction, personality, model]
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

    delete:
      summary: Delete user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"

  /users/{id}/password:
    put:
      summary: Update user password
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string }
              required: [password]
      responses:
        "200":
          description: Password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

  /users/{id}/follow:
    post:
      summary: Follow user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Followed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
    delete:
      summary: Unfollow user
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Unfollowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /users/{id}/followees:
    get:
      summary: List followees
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        "200":
          description: Followees list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

  /users/{id}/followers:
    get:
      summary: List followers
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
      responses:
        "200":
          description: Followers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/count:
    get:
      summary: Get post count
      security:
        - sessionCookie: []
      parameters:
        - name: query
          in: query
          schema: { type: string }
        - name: owned_by
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
        - name: reply_to
          in: query
          schema:
            type: string
          description: |
            If omitted: include all posts.
            If empty string (""): only posts with no reply_to (not a reply).
            Otherwise: only posts with reply_to equal to the given value.
      responses:
        "200":
          description: Post count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
        "401":
          $ref: "#/components/responses/Error401"

  /posts:
    get:
      summary: List posts
      security:
        - sessionCookie: []
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: query
          in: query
          schema: { type: string }
        - name: owned_by
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
        - name: reply_to
          in: query
          schema:
            type: string
          description: |
            If omitted: include all posts.
            If empty string (""): only posts with no reply_to (not a reply).
            Otherwise: only posts with reply_to equal to the given value.
      responses:
        "200":
          description: Posts list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Error401"

    post:
      summary: Create post
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                owned_by: { type: string }
                reply_to:
                  type: string
                  nullable: true
              required: [content, owned_by]
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/Error400"

  /posts/detail:
    get:
      summary: List posts (with detail)
      security:
        - sessionCookie: []
      parameters:
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: query
          in: query
          schema: { type: string }
        - name: owned_by
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
        - name: reply_to
          in: query
          schema:
            type: string
          description: |
            If omitted: include all posts.
            If empty string (""): only posts with no reply_to (not a reply).
            Otherwise: only posts with reply_to equal to the given value.
        - name: focus_user_id
          in: query
          schema:
            type: string
          description: (Optional) Used for personalization (e.g., is_liked_by_focus_user)
      responses:
        "200":
          description: Posts detail list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDetail"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/by-followees/detail:
    get:
      summary: List posts by followees (with detail)
      security:
        - sessionCookie: []
      parameters:
        - name: user_id
          in: query
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: include_self
          in: query
          schema: { type: boolean, default: false }
      responses:
        "200":
          description: Posts detail list by followees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDetail"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/liked/detail:
    get:
      summary: List posts liked by user (with detail)
      security:
        - sessionCookie: []
      parameters:
        - name: user_id
          in: query
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: Posts liked by user (detail)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDetail"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"

  /posts/{id}/detail:
    get:
      summary: Get post detail by id
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: focus_user_id
          in: query
          schema:
            type: string
          description: (Optional) Used for personalization (e.g., is_liked_by_focus_user)
      responses:
        "200":
          description: Post detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetail"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}:
    get:
      summary: Get post by id
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

    put:
      summary: Update post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                reply_to:
                  type: string
                  nullable: true
              required: [content]
      responses:
        "200":
          description: Post updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"
        "400":
          $ref: "#/components/responses/Error400"

    delete:
      summary: Delete post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}/like:
    post:
      summary: Like a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Post liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
    delete:
      summary: Remove like from a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Like removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string }
        "401":
          $ref: "#/components/responses/Error401"
        "404":
          $ref: "#/components/responses/Error404"

  /posts/{id}/likers:
    get:
      summary: List users who liked a post
      security:
        - sessionCookie: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: limit
          in: query
          schema: { type: integer, default: 100 }
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: Users who liked this post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Error401"
        "400":
          $ref: "#/components/responses/Error400"
